apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  labels:
    app: canvas-mongodb
data:
  init-replica-set.js: |
    // Wait for MongoDB to be ready
    while (true) {
      try {
        db.adminCommand('ping');
        break;
      } catch (e) {
        print('Waiting for MongoDB to be ready...');
        sleep(1000);
      }
    }

    // Initialize replica set if not already initialized
    try {
      var status = rs.status();
      print('Replica set already initialized');
    } catch (e) {
      print('Initializing replica set...');
      rs.initiate({
        _id: 'rs0',
        members: [
          { _id: 0, host: 'canvas-mongodb-0.canvas-mongodb-headless:27017', priority: 2 },
          { _id: 1, host: 'canvas-mongodb-1.canvas-mongodb-headless:27017', priority: 1 },
          { _id: 2, host: 'canvas-mongodb-2.canvas-mongodb-headless:27017', priority: 1 }
        ]
      });

      // Wait for replica set to be ready
      while (true) {
        try {
          var status = rs.status();
          if (status.myState === 1) {
            print('Replica set initialized successfully');
            break;
          }
        } catch (e) {
          print('Waiting for replica set to be ready...');
        }
        sleep(1000);
      }
    }

    // Create application database and user
    use('canvas_orchestration');

    // Create collections with appropriate indexes
    db.createCollection('workflows');
    db.workflows.createIndex({ 'status': 1 });
    db.workflows.createIndex({ 'createdAt': 1 });
    db.workflows.createIndex({ 'userId': 1 });

    db.createCollection('plugins');
    db.plugins.createIndex({ 'name': 1 }, { unique: true });
    db.plugins.createIndex({ 'category': 1 });
    db.plugins.createIndex({ 'enabled': 1 });

    db.createCollection('executions');
    db.executions.createIndex({ 'workflowId': 1 });
    db.executions.createIndex({ 'status': 1 });
    db.executions.createIndex({ 'startedAt': 1 });

    db.createCollection('users');
    db.users.createIndex({ 'email': 1 }, { unique: true });
    db.users.createIndex({ 'username': 1 }, { unique: true });

    db.createCollection('sessions');
    db.sessions.createIndex({ 'sessionId': 1 }, { unique: true });
    db.sessions.createIndex({ 'expiresAt': 1 }, { expireAfterSeconds: 0 });

    print('Database initialization completed');

  mongod.conf: |
    # MongoDB configuration for Kubernetes
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1

    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
      logRotate: reopen

    net:
      port: 27017
      bindIp: 0.0.0.0

    processManagement:
      timeZoneInfo: /usr/share/zoneinfo

    replication:
      replSetName: rs0

    security:
      authorization: enabled
      keyFile: /data/replica.key